<?php

namespace App\Controller;


use App\Entity\SourcePhoto;
use App\Form\SourcePhotoType;
use Symfony\Component\Form\FormBuilder;
use App\Repository\SourcePhotoRepository;
use Symfony\Component\Filesystem\Filesystem;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\Validator\Constraints\Date;
use Symfony\Component\Form\Extension\Core\Type\ChoiceType;
use Symfony\Component\Form\Extension\Core\Type\SearchType;
use Symfony\Component\Form\Extension\Core\Type\SubmitType;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;

class AdminGestionPhotoController extends AbstractController
{

    /**
     * Function qui est utiliser pour upload dans la function adherentProfile
     * @return string
     */
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }

    /**
     * @Route("/admin/gestion/photo", name="admin_gestion_photo")
     * @param Request $request
     * @param Filesystem $fileNames
     * @param SourcePhotoRepository $sourcePhoto
     */

    public function gestionPhoto(Request $request,Filesystem $filesystem, SourcePhotoRepository $sourcePicture)
    {   
    
        //Création du form pour le filtrer les photos par categorie
        $searchFilter=$this->createFormBuilder()
        ->add('categorie',ChoiceType::class,[
                'choices' => [

                'Vie à l\'école' => 'vie_ecole',
                'Course camargaise' => 'course_camarguaise',
                'Autre' => 'autre',
            
                ],
            ] )
         ->add('rechercher', SubmitType::class)
         ->getForm();
        $searchFilter->handleRequest($request);

        
        //Création du form pour reset le filtre par defaut
        $reset=$this->createFormBuilder()
         ->add('reset', SubmitType::class)
         ->getForm();
        $reset->handleRequest($request);
         

       //Creation du form pour uploader des photos 
        $newPicture = new SourcePhoto();
        $sourcePictureForm = $this->createForm(SourcePhotoType::class, $newPicture);
        $sourcePictureForm->handleRequest($request);

       
        if ($sourcePictureForm->isSubmitted() && $sourcePictureForm->isValid()) {

            // Stock les fichiés  uploader dans une variable
            $category = $newPicture->getCategorie();
            $title = $newPicture->getTitre();
            $date = $newPicture->getDate();
            $picture = $newPicture->getImage();
           
            $path = $this->getParameter('sourcePhoto_directory');

            //Crée un dossier avec l'id de l'adherent connecté à l'amplacement du $path
             if (!$path) {

                $path = $filesystem->mkdir($path.'source_photo',0700);
                
            }

            // Géneration de nom unique pour les fichiers pour éviter les doublons et sécuriser
            $fileNames = $this->generateUniqueFileName().'.'.$picture->guessExtension();
 
            // Envoie les fichiés dans le dossier carousel
            $picture->move($path , 
                    $fileNames);
            
            //Envoie les noms relié au fichier dans la BDD
            $newPicture->setImage($fileNames);
            $newPicture->setDate(new\DateTime('now'));

            $entityManager = $this->getDoctrine()->getManager();
            $entityManager->persist($newPicture);
            $entityManager->flush();


            return $this->redirect($this->generateUrl('admin_gestion_photo'));

        }

    
        if($searchFilter->isSubmitted() && $searchFilter->isValid()){


             $filterPicture = $this->getDoctrine()->getRepository(SourcePhoto::class)->findBy(["categorie" => $searchFilter->getData()['categorie']]);

             return $this->render('admin_gestion_photo/gestionPhoto.html.twig', [

                'sourcePictureForm' => $sourcePictureForm->createView(),
                'sourcePicture' => $filterPicture,
                'searchFilter'=> $searchFilter->createView(),
                'reset' => $reset->createView()
             
            ]);
            
        }

        if($reset->isSubmitted() && $reset->isValid()){

             return $this->redirect($this->generateUrl('admin_gestion_photo'));
            
        }

        //Render par defaut quand il y à pas de filtre
        return $this->render('admin_gestion_photo/gestionPhoto.html.twig', [

             'sourcePictureForm' => $sourcePictureForm->createView(),
             'sourcePicture' => $sourcePicture->findAll(),
             'searchFilter'=> $searchFilter->createView(),
             'reset' => $reset->createView()
        ]);
}  


    /**
     * Supprimer une image
     * @Route("admin/gestion/photo{id}", name="delete_picture")
     * @param $id
     */
    
     public function deleteFolderRegistration($id)

    {   
        
        $folderRegister = $this->getDoctrine()->getRepository(SourcePhoto::class)->find($id);
       
         //Supprimer le fichier dans le dossier qui a l'id du user connecté
        $path = $this->getParameter('sourcePhoto_directory');
        $fs = new Filesystem(); 
        $fs->remove($path.$folderRegister->getImage()); 
        
        //Supprimer les nom des fichiés dans la BDD
        $em = $this->getDoctrine()->getManager();
        $em->remove($folderRegister);
        $em->flush();

        return $this->redirectToRoute('admin_gestion_photo');
    }

}
