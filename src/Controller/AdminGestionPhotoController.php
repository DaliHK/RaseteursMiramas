<?php
namespace App\Controller;
use App\Entity\SourcePhoto;
use App\Form\SourcePhotoType;
use Symfony\Component\Form\FormBuilder;
use App\Repository\SourcePhotoRepository;
use Symfony\Component\Filesystem\Filesystem;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\Validator\Constraints\Date;
use Symfony\Component\Form\Extension\Core\Type\ChoiceType;
use Symfony\Component\Form\Extension\Core\Type\SearchType;
use Symfony\Component\Form\Extension\Core\Type\SubmitType;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
class AdminGestionPhotoController extends AbstractController
{
    public function searchBar(){
        //Création du form pour le searchBar
        $request = new Request();
        $searchBar=$this->createFormBuilder()
        ->add('titre',SearchType::class)
        ->add('rechercher', SubmitType::class)
        ->getForm();
        return $searchBar;
    }
    public function searchFilter(){
         //Création du form pour le filtre par categorie
        $request = new Request();
        $searchFilter=$this->createFormBuilder()
        ->add('categorie',ChoiceType::class,[
                'choices' => [
                'Vie à l\'école' => 'vie_ecole',
                'Course camargaise' => 'course_camarguaise',
                'Partenaire' => 'partenaire',
                ],
            ] )
         ->add('rechercher', SubmitType::class)
         ->getForm();
        return $searchFilter;
    }
    public function reset(){
        //Création du form pour reset le filtre par defaut
        $request = new Request();
        $reset = $this->createFormBuilder()
         ->add('reset', SubmitType::class)
         ->getForm();
         return $reset;
    }
    /**
     * Function qui est utiliser pour upload dans la function adherentProfile
     * @return string
     */
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }
    /**
     * @Route("/admin/gestion/photo", name="admin_gestion_photo")
     * @param Request $request
     * @param Filesystem $fileNames
     * @param SourcePhotoRepository $sourcePhoto
     */
    public function gestionPhoto(Request $request,Filesystem $filesystem, SourcePhotoRepository $sourcePicture)
    {
        //On appelle les functions qui contient les forms
        $searchBar = $this->searchBar();
        $searchFilter = $this->searchFilter();
        $reset = $this->reset();
        //Creation du form pour uploader des photos
        $newPicture = new SourcePhoto();
        $sourcePictureForm = $this->createForm(SourcePhotoType::class, $newPicture);
        $reset->handleRequest($request);
        $searchFilter->handleRequest($request);
        $sourcePictureForm->handleRequest($request);
        $searchBar->handleRequest($request);
        //If upload
        if ($sourcePictureForm->isSubmitted() && $sourcePictureForm->isValid()) {
            // Stock les données envoyer par le formulaire des variablesc
            $category = $newPicture->getCategorie();
            $title = $newPicture->getTitre();
            $date = $newPicture->getDate();
            $picture = $newPicture->getImage();
            $path = $this->getParameter('sourcePhoto_directory');
            //Crée un dossier avec l'id de l'adherent connecté à l'amplacement du $path
             if (!$path) {
                $path = $filesystem->mkdir($path.'source_photo',0700);
            }
            //Pour upload plusieur photo en même temps
            foreach ($picture as $pictures) {
                // Géneration de nom unique pour les fichiers pour éviter les doublons et sécuriser
                $fileNames = $this->generateUniqueFileName().'.'.$pictures->guessExtension();
                // Envoie les fichiés dans le dossier carousel
                $pictures->move($path ,
                        $fileNames);
                //On est obligé d'instancier plusieur fois la classe pour envoyer dans la bdd
                $newPictures = new SourcePhoto();
                $newPictures->setImage($fileNames);
                $newPictures->setDate(new\DateTime('now'));
                $newPictures->setTitre($title);
                $newPictures->setCategorie($category);
                $entityManager = $this->getDoctrine()->getManager();
                $entityManager->persist($newPictures);
            }
            $entityManager->flush();
            return $this->redirect($this->generateUrl('admin_gestion_photo'));
        }
        //If filtre par categorie
        if($searchFilter->isSubmitted() && $searchFilter->isValid()){
             $filterPicture = $this->getDoctrine()->getRepository(SourcePhoto::class)->findBy(["categorie" => $searchFilter->getData()['categorie']]);
             return $this->render('admin_gestion_photo/gestionPhoto.html.twig', [
                'sourcePictureForm' => $sourcePictureForm->createView(),
                'sourcePicture' => $filterPicture,
                'searchFilter'=> $searchFilter->createView(),
                'reset' => $reset->createView(),
                'searchBar' => $searchBar->createView()
            ]);
        }
        //If barre de recherche
         if($searchBar->isSubmitted() && $searchBar->isValid()){
             $filterPicture = $this->getDoctrine()->getRepository(SourcePhoto::class)->findByTitle($searchBar->getData()['titre']);
             return $this->render('admin_gestion_photo/gestionPhoto.html.twig', [
                'sourcePictureForm' => $sourcePictureForm->createView(),
                'sourcePicture' => $filterPicture,
                'searchFilter'=> $searchFilter->createView(),
                'searchBar' => $searchBar->createView(),
                'reset' => $reset->createView()
            ]);
        }
        //if reset
        if($reset->isSubmitted() && $reset->isValid()){
             return $this->redirect($this->generateUrl('admin_gestion_photo'));
        }
        //Render par defaut quand il y à pas de filtre
        return $this->render('admin_gestion_photo/gestionPhoto.html.twig', [
             'sourcePictureForm' => $sourcePictureForm->createView(),
             'sourcePicture' => $sourcePicture->findAll(),
             'searchFilter'=> $searchFilter->createView(),
             'searchBar' => $searchBar->createView(),
             'reset' => $reset->createView()
        ]);
}
    /**
     * Supprimer une photo
     * @Route("admin/gestion/photo{id}", name="delete_picture")
     * @param $id
     */
     public function deleteFolderRegistration($id)
    {
        $folderRegister = $this->getDoctrine()->getRepository(SourcePhoto::class)->find($id);
         //Supprimer la photo dans le dossier
        $path = $this->getParameter('sourcePhoto_directory');
        $fs = new Filesystem();
        $fs->remove($path.$folderRegister->getImage());
        //Supprimer la ligne dans la BDD
        $em = $this->getDoctrine()->getManager();
        $em->remove($folderRegister);
        $em->flush();
        return $this->redirectToRoute('admin_gestion_photo');
    }
}