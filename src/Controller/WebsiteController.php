<?php

namespace App\Controller;

use App\Entity\Evenement;
use App\Entity\Participation;
use App\Form\EditAdherentType;
use App\Entity\DossierInscription;
use App\Form\DossierInscriptionType;
use App\Repository\AdherentRepository;
use App\Repository\EvenementRepository;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\Security\Core\User\UserInterface;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\File\Exception\FileException;
use Symfony\Component\Security\Core\Encoder\UserPasswordEncoderInterface;

class WebsiteController extends AbstractController

{
    /**
     * @Route("/", name="home")
     */

    public function home(){
    
        return $this -> render('/home/home.html.twig');

    }
    /**
     * @return string
     */
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }


    /**
     * Afficher les informations de l'adherent et supprimer ces evenements
     * @Route("adherent/profile", name="adherent_profile")
     * @param UserInterface $userProfile
     */

    public function adherentProfile(EvenementRepository $evenement,UserInterface $userProfile ,AdherentRepository $adherent,Request $request){

         /*  $evenement = $evenement->find($adherent); */
         /*     dump($userProfile->getDossierInscription());
        die; 
         */
        //Upload du dossier d'inscription 

        $newFileRegistration = new DossierInscription();
        $registration = $this->createForm(DossierInscriptionType::class, $newFileRegistration);
        $registration->handleRequest($request);
        
        if ($registration->isSubmitted() && $registration->isValid()) {
            // $file stores the uploaded PDF file
            /** @var Symfony\Component\HttpFoundation\File\UploadedFile $file */
            $file = $newFileRegistration->getphotoIdentite();

            $fileName = $this->generateUniqueFileName().'.'.$file->guessExtension();

            // Move the file to the directory where brochures are stored
            try {
                $file->move(
                    $this->getParameter('registration_directory'),
                    $fileName
                );
            } catch (FileException $e) {
                // ... handle exception if something happens during file upload
            }

           
            $newFileRegistration->setphotoIdentite($fileName);
            $newFileRegistration->setCertificatMedical($fileName);
            $newFileRegistration->setDroitImage($fileName);
            $newFileRegistration->setDroitTransport($fileName);
            $newFileRegistration->setDroitPratique($fileName);
            $newFileRegistration->setRenseignementsMedicaux($fileName);
            $newFileRegistration->setRenseignementsGeneraux($fileName);

            $newFileRegistration->setAdherent($userProfile);

            // ... persist the $product variable or any other work
            $entityManager = $this->getDoctrine()->getManager();
            $entityManager->persist($newFileRegistration);
            $entityManager->flush();

            return $this->redirect($this->generateUrl('adherent_profile'));
        }

        return $this -> render('/website/adherentProfile.html.twig',[
            
            'user'=> $userProfile,
            'evenement'=>$userProfile,
            'form' => $registration->createView()

        ]);
    }


    /**
     * Permet de modifier les informations de l'adherent
     * @Route("adherent/profile/edit", name="adherent_edit_profile")
     * @param Request $request
     * @param UserInterface $user
     * @return RedirectResponse|Response
     * @param UserPasswordEncoderInterface $passwordEncoder
     */
    
    public function adherentEditProfile(Request $request, UserInterface $userProfile, UserPasswordEncoderInterface $encoder)
    {
        
        //affiche le formulaire deja enregistré de l'user pour qu'il puisse le consulter ou modifier
        $form = $this->createForm(EditAdherentType::class,$userProfile);
        //j'envoie les informations modifié à la base de données 
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            
            // Pour encoder le password quand il est modifié
            $hash = $encoder->encodePassword($userProfile, $userProfile->getPassword()); 
            $userProfile->setPassword($hash);  

            $entityManager = $this->getDoctrine()->getManager();
            $entityManager->persist($userProfile);
            $entityManager->flush();
            return $this->redirectToRoute('adherent_profile');
        }

        return $this->render('/website/adherentEditProfile.html.twig', [
            'user' => $userProfile,
            'adherent' => $form->createView()
            
        ]);
    }

    /**
     * @Route("adherent/profile/{id}", name="supression_evenement_inscrit")
     */

    public function deleted_evenement( UserInterface $userProfile)
    {

        $entityManager = $this->getDoctrine()->getManager();
        $entityManager->remove();
        $entityManager->flush();
    
        return $this->redirectToRoute('adherent_profile');
        
    }

    
    }

